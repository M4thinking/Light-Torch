model:
  class: path.to.your.ModelClass
  args: {}

optimizer:
  class: path.to.your.OptimizerClass
  args:
    params: ${model.parameters()}
    lr: 0.001

criterion:
  class: path.to.your.CriterionClass

device:
  class: torch.device
  args:
    device: ${'cuda' if torch.cuda.is_available() else 'cpu'}

metrics:
  accuracy:
    class: path.to.your.AccuracyMetricClass
  f1_score:
    class: path.to.your.F1ScoreMetricClass

data_loader:
  class: path.to.your.DataLoaderClass
  args:
    batch_size: 64
    valid_batch_size: 1000

callbacks:
  model_checkpoint:
    class: path.to.your.ModelCheckpointClass
    args:
      filepath: model_{epoch:02d}-{valid_loss:.2f}.pth
      monitor: valid_loss
      save_best_only: True
      mode: min
      period: 1
  early_stopping:
    class: path.to.your.EarlyStoppingClass
    args:
      monitor: valid_loss
      min_delta: 0.001
      patience: 5
      mode: min

log_dir: runs/base_experiment
epochs: 10
valid_freq: 0.2